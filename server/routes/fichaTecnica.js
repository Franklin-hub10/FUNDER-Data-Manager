const express = require("express");
const db = require("../config/database");

const router = express.Router();

// Helper: convierte valores booleanos a 1 o 0
function boolToInt(value) {
    return value ? 1 : 0;
}

// üìå Obtener todas las fichas t√©cnicas
router.get("/fichas", async (req, res) => {
    try {
        const [results] = await db.query("SELECT * FROM emprendedor");
        res.status(200).json(results);
    } catch (error) {
        console.error("Error al obtener fichas t√©cnicas:", error);
        res.status(500).json({ message: "Error al obtener fichas t√©cnicas", error });
    }
});

// üìå Obtener una ficha t√©cnica por ID
router.get("/ficha/:id", async (req, res) => {
    const { id } = req.params;
    try {
        const [result] = await db.query("SELECT * FROM emprendedor WHERE idEmprendedor = ?", [id]);
        if (result.length === 0) {
            return res.status(404).json({ message: "Ficha no encontrada" });
        }
        res.status(200).json(result[0]);
    } catch (error) {
        console.error("Error al obtener ficha t√©cnica:", error);
        res.status(500).json({ message: "Error al obtener ficha t√©cnica", error });
    }
});

// üìå Crear una ficha t√©cnica
router.post("/createFicha", async (req, res) => {
    try {
        // Incluir el nuevo campo "numeroIdentificacion" en la desestructuraci√≥n
        const {
            nombres, apellidos, numeroIdentificacion, edad, idSede, generoIdentidad, estadoCivil, numeroCargas, rolFamiliar,
            etnia, discapacidad, Nacionalidad, pais, estatusMigratorio, tiempoDeResidenciaPais,
            direccion, telefono1, telefono2, correo, servicioDeInternet, celular, computadora, tablet,
            nivelInstitucional, tipoNegocio, actividadEconomica, promMensualIngreso, promMensualGastos,
            caracteristicaDelNegocio, camposAsistenciaTecnica, temaCapacitacion,
            idColaborador
        } = req.body;

        // Validar que los campos obligatorios no est√©n vac√≠os (agrega numeroIdentificacion en la validaci√≥n)
        if (!nombres || !apellidos || !numeroIdentificacion || !edad || !idSede || !generoIdentidad || !estadoCivil ||
            numeroCargas === undefined || !rolFamiliar || !etnia || !discapacidad || !direccion ||
            !telefono1 || !telefono2 || !correo || !nivelInstitucional || !tipoNegocio || !actividadEconomica ||
            promMensualIngreso === undefined || promMensualGastos === undefined || !caracteristicaDelNegocio ||
            !camposAsistenciaTecnica || !temaCapacitacion) {
            return res.status(400).json({ message: "‚ùå Faltan campos obligatorios en la solicitud." });
        }

        // Convertir valores num√©ricos y calcular utilidad
        const ingreso = Number(promMensualIngreso) || 0;
        const gastos = Number(promMensualGastos) || 0;
        const utilidad = ingreso - gastos;

        // Convertir booleanos a 1 o 0 para MySQL
        const internet = boolToInt(servicioDeInternet);
        const celularDisponible = boolToInt(celular);
        const pcDisponible = boolToInt(computadora);
        const tabletDisponible = boolToInt(tablet);

        // Asignar "Ecuador" por defecto si no se env√≠a el pa√≠s
        const paisFinal = pais || "Ecuador";

        // Si se env√≠a tiempoDeResidenciaPais, se espera en formato "YYYY-MM-DD"
        const tiempoResidencia = tiempoDeResidenciaPais ? tiempoDeResidenciaPais : null;

      
   

        // La consulta ahora incluye el nuevo campo "numeroIdentificacion" y "idPais"
        const sql = `
            INSERT INTO emprendedor (
                nombres, apellidos, numeroIdentificacion, edad, idSede, generoIdentidad, estadoCivil, numeroCargas, rolFamiliar,
                etnia, discapacidad, Nacionalidad, pais, estatusMigratorio, tiempoDeResidenciaPais, direccion, telefono1, telefono2, correo,
                servicioDeInternet, celular, computadora, tablet, nivelInstitucional, tipoNegocio, actividadEconomica, promMensualIngreso,
                promMensualGastos, promMensualUtilidad, caracteristicaDelNegocio, camposAsistenciaTecnica, temaCapacitacion,
                idColaborador
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        `;

        const values = [
            nombres, apellidos, numeroIdentificacion, edad, idSede, generoIdentidad, estadoCivil, numeroCargas, rolFamiliar,
            etnia, discapacidad, Nacionalidad || null, paisFinal, estatusMigratorio || null, tiempoResidencia, direccion, telefono1, telefono2, correo,
            internet, celularDisponible, pcDisponible, tabletDisponible, nivelInstitucional, tipoNegocio, actividadEconomica, ingreso,
            gastos, utilidad, caracteristicaDelNegocio, camposAsistenciaTecnica, temaCapacitacion,
            idColaborador || null
        ];

        // Ejecutar la consulta SQL
        const [result] = await db.query(sql, values);

        res.status(201).json({ message: "‚úÖ Ficha t√©cnica creada correctamente", idEmprendedor: result.insertId });
    } catch (error) {
        console.error("‚ùå Error al crear ficha t√©cnica:", error);
        res.status(500).json({ message: "Error al crear ficha t√©cnica", error });
    }
});

// üìå Actualizar una ficha t√©cnica
router.put("/updateFicha/:id", async (req, res) => {
    const { id } = req.params;
    try {
        const {
            nombres, apellidos, numeroIdentificacion, edad, idSede, generoIdentidad, estadoCivil, numeroCargas, rolFamiliar,
            etnia, discapacidad, Nacionalidad, pais, estatusMigratorio, tiempoDeResidenciaPais,
            direccion, telefono1, telefono2, correo, servicioDeInternet, celular, computadora, tablet,
            nivelInstitucional, tipoNegocio, actividadEconomica, promMensualIngreso, promMensualGastos,
            caracteristicaDelNegocio, camposAsistenciaTecnica, temaCapacitacion,
            idColaborador
        } = req.body;

        const ingreso = Number(promMensualIngreso) || 0;
        const gastos = Number(promMensualGastos) || 0;
        const promMensualUtilidad = ingreso - gastos;

        const internet = boolToInt(servicioDeInternet);
        const celularDisponible = boolToInt(celular);
        const pcDisponible = boolToInt(computadora);
        const tabletDisponible = boolToInt(tablet);

        const paisFinal = pais || "Ecuador";
        const tiempoResidencia = tiempoDeResidenciaPais ? tiempoDeResidenciaPais : null;

        // Asignar idPais = 1 (puedes ajustar este valor seg√∫n corresponda)
      

        await db.query(`
            UPDATE emprendedor SET
                nombres = ?,
                apellidos = ?,
                numeroIdentificacion = ?,
              
                edad = ?,
                idSede = ?,
                generoIdentidad = ?,
                estadoCivil = ?,
                numeroCargas = ?,
                rolFamiliar = ?,
                etnia = ?,
                discapacidad = ?,
                Nacionalidad = ?,
                pais = ?,
                estatusMigratorio = ?,
                tiempoDeResidenciaPais = ?,
                direccion = ?,
                telefono1 = ?,
                telefono2 = ?,
                correo = ?,
                servicioDeInternet = ?,
                celular = ?,
                computadora = ?,
                tablet = ?,
                nivelInstitucional = ?,
                tipoNegocio = ?,
                actividadEconomica = ?,
                promMensualIngreso = ?,
                promMensualGastos = ?,
                promMensualUtilidad = ?,
                caracteristicaDelNegocio = ?,
                camposAsistenciaTecnica = ?,
                temaCapacitacion = ?,
                idColaborador = ?
            WHERE idEmprendedor = ?
        `, [
            nombres, apellidos, numeroIdentificacion, edad, idSede, generoIdentidad, estadoCivil, numeroCargas, rolFamiliar,
            etnia, discapacidad, Nacionalidad || null, paisFinal, estatusMigratorio || null, tiempoResidencia, direccion, telefono1, telefono2, correo,
            internet, celularDisponible, pcDisponible, tabletDisponible, nivelInstitucional, tipoNegocio, actividadEconomica, ingreso,
            gastos, promMensualUtilidad, caracteristicaDelNegocio, camposAsistenciaTecnica, temaCapacitacion,
            idColaborador || null, id
        ]);

        res.status(200).json({ message: "Ficha t√©cnica actualizada" });
    } catch (error) {
        console.error("Error al actualizar ficha t√©cnica:", error);
        res.status(500).json({ message: "Error al actualizar ficha t√©cnica", error });
    }
});

// üìå Eliminar una ficha t√©cnica
router.delete("/deleteFicha/:id", async (req, res) => {
    const { id } = req.params;
    try {
        await db.query("DELETE FROM emprendedor WHERE idEmprendedor = ?", [id]);
        res.status(200).json({ message: "Ficha t√©cnica eliminada correctamente" });
    } catch (error) {
        console.error("Error al eliminar ficha t√©cnica:", error);
        res.status(500).json({ message: "Error al eliminar ficha t√©cnica", error });
    }
});

module.exports = router;
